name: Continuous Integration

on:
  push:
    branches: [ "feat/security" ]
  workflow_dispatch:

#env:
  #SONAR_ORG: hypheni
  #SONAR_PROJ: go-bp-calc-k8s
  
jobs:
  integration:
    permissions:
      contents: read
      security-events: write

    runs-on: ubuntu-22.04

    steps:
      # Git checkout
      - name: Checkout
        uses: actions/checkout@v3
        
      # # Install Go
      # - name: Set up Go
      #   uses: actions/setup-go@v4
      #   with:
      #     go-version: '1.20'
      #     cache-dependency-path: subdir/go.sum
      
      # # Code Build
      # - name: Code Build
      #   run: go build -v ./...
      
      # # Unit testing
      # - name: Unit Test
      #   run: go test -v -coverprofile=coverage.out ./...

      # # SAST analysis
      # - name: SonarCloud Analysis
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args:
      #       -Dsonar.projectKey=go-bp-calc-k8s
      #       -Dsonar.organization=hypheni
      #       -Dsonar.go.coverage.reportPaths=coverage.out
      #       -Dsonar.exclusions=**/*main.go,**/handlers.go,**/helpers.go,**/models.go,**/bpreading.go,**/routes.go,**/*_test.go

      # # Synk Vulnarability Scan for Go Packages
      # - name: Vulnerability Check with Synk
      #   uses: snyk/actions/golang@master
      #   continue-on-error: true
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: --sarif-file-output=snyk.sarif
      #           --severity-threshold=high
      # - uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: snyk.sarif

      # # Build Container Image
      # - name: Image build
      #   run: |
      #     docker build . --file Dockerfile --tag bpcalc-backend:${{ github.sha }}

      # # Scan Image for Vulnarability
      # - name: Trivy Vulnerability Scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'bpcalc-backend:${{ github.sha }}'
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'
      # - uses: github/codeql-action/upload-sarif@v2
      #   if: always()
      #   with:
      #     sarif_file: 'trivy-results.sarif'
      
      # GCP Auth
      - name: Google Auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      # Push to GCR
      - name: Push to GCR
        uses: RafikFarhad/push-to-gcr-github-action@v5-beta
        with:
          registry: gcr.io
          project_id: tudublin
          image_name: bpcalc-backend
          image_tag: ${{ github.sha }},v1
          dockerfile: ./Dockerfile
          context: .
